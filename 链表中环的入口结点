/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
    //给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null
    //快慢指针，快指针是慢指针的2倍，当相等即存在环，此时，从头开始，而慢指针则继续下走。再相遇的点就是环入口。这个有数学推导。
};
*/
class Solution {
public:
    ListNode* EntryNodeOfLoop(ListNode* pHead)
    {
        auto p1 = pHead;
        auto p2 = p1;
        if(p1->next == nullptr)
        {
            return nullptr;
        }
        
        while(p2 != nullptr)
        {
            p1 = p1->next;
            if(p2->next != nullptr)
                p2 = p2->next->next;
            else{
                p2 = nullptr;
            }
            if(p1 == p2){
                break;
            }
        }
        if(p2 == p1)
        {
            while(pHead != p1)
            {
                pHead = pHead->next;
                p1 = p1->next;
            }
            return pHead;
        }
        else{
            return nullptr;
        }
    }
};
