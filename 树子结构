/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    bool IsSubTree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if (pRoot2 == NULL)
        {
            return true;
        }
                if(pRoot1 == NULL)
        {
            return false;
        }
        bool lres = false,rres = false;
        if(pRoot1->val == pRoot2->val)
        {
            lres = IsSubTree(pRoot1->left,pRoot2->left);
            rres = IsSubTree(pRoot1->right,pRoot2->right);
            return lres && rres;
        }
        else{
            return false;
        }
    }    

    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if(pRoot1 == NULL || pRoot2 == NULL)
        {
            return false;
        }
        bool t = false;
        if(pRoot1->val == pRoot2->val)
        {
             t = IsSubTree(pRoot1,pRoot2);            
        }
        if(!t)
        {
            t = HasSubtree(pRoot1->left,pRoot2);            
        }
        if(!t)
        {
            t = HasSubtree(pRoot1->right,pRoot2);            
        }
        return t;    
    }
};
//
