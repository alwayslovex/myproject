/*
struct RandomListNode {
    int label;
    struct RandomListNode *next, *random;
    RandomListNode(int x) :
            label(x), next(NULL), random(NULL) {
    }
};
*/
class Solution {
public:
    RandomListNode* Clone(RandomListNode* pHead)
    {
        if(pHead == nullptr)
        {
            return nullptr;
        }
        RandomListNode * node = pHead;
        while(node->next != nullptr)//在原来的链表中插入相同的节点
        {
            auto ptr = new RandomListNode(node->label);
            ptr->next = node->next;
            node->next = ptr;
            node = ptr->next;
        }
        
        node->next = new RandomListNode(node->label);
        node = pHead;
        while(node != nullptr && node->next != nullptr)//设置随机指针
        {
            if(node->random != nullptr)
            {
                node->next->random = node->random->next;
            }
            node = node->next->next;
        }
        node = pHead;
        auto pHead2 = node->next;
        while(node != nullptr && node->next != nullptr)//从原来的链表中分离新的
        {
            auto tmp = node->next;
            node->next = node->next->next;
            if(tmp->next != nullptr)
            {
                tmp->next = tmp->next->next;
            }
            node = node->next;
        }
        return pHead2;
    }
};
