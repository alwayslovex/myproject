/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的


构造镜像二叉树，然后按照层次遍历，看遍历结果是否一样。空的节点用-1填充。。这个会改变二叉树的结构
//另外一种想法是，左子树，进行左根右的顺序深度遍历，右子树进行右根左的顺序，空节点进行-1填充。
最后比较遍历的结果是否一样。
*/
class Solution {
public:
    bool isSymmetrical(TreeNode* pRoot)
    {
        vector<int> n1,n2;
        GetLayer(n1,pRoot);
        MirrorTree(pRoot);
        GetLayer(n2,pRoot);
        int n;
        if(n1.size() != n2.size()){
            return false;
        }
        for(auto it = 0;it != n1.size();++it)
        {
            if(n1[it] != n2[it])
            {
                return false;
            }
        }
        
        return true;
    }
    void MirrorTree(TreeNode * root){
        if(root == nullptr)
        {
            return ;
        }
        
        MirrorTree(root->left);
        MirrorTree(root->right);
        auto tmp = root->left;
        root->left = root->right;
        root->right = tmp;
    }
    void GetLayerTraverse(vector<int> & nums,TreeNode * root){
        queue<TreeNode*> q;
        if(root != nullptr)
        {
            q.push(root);
        }
        else{
            return ;
        }
        
        while(!q.empty())
        {
            auto t = q.front();
            q.pop();
            
            if(t == nullptr)
            {
                nums.push_back(-1);
                continue;
            }
            else
                nums.push_back(t->val);                            
            q.push(t->left);
            q.push(t->right);
        }
    }
};
