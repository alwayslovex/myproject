/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
/*
输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。
路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)
*/
#include <stack>
class Solution {
public:
    vector<vector<int> > FindPath(TreeNode* root,int expectNumber) {
        vector<vector<int> > ret;
        if(root == nullptr)
        {
            return ret;
        }
        vector<int> path;
        Find(root,expectNumber,0,ret,path);
        return ret;
    }
    
    void Find(TreeNode* root,int expectNumber,int curval,vector<vector<int>> & ret,vector<int> &path)
    {
        path.push_back(root->val);
        curval += root->val;
        if(root->left == nullptr && root->right == nullptr && curval == expectNumber)
        {
            ret.push_back(path);
        }
        if(root->left != nullptr)
        {
            Find(root->left,expectNumber,curval,ret,path);
        }
                if(root->right != nullptr)
        {
            Find(root->right,expectNumber,curval,ret,path);
        }
        
        path.pop_back();
    }
};
