class Solution {
public:
    //需要一个相同的空间来存放遍历过的标示,同时需要再找不到的时候进行回退，所以用递归
    bool hasPath(char* matrix, int rows, int cols, char* str)
    {
        vector<char> flags(rows*cols,0);
        string src(matrix);
        size_t last_pos = string::npos;

        for(int i = 0;i < rows;++i)
        {
            for(int j = 0;j < cols;++j)
            {
                if (Search(src,rows,cols,i,j,0,str,flags))//不断调整起始位置，开始进行寻找
                {
                    return true;
                }
            }
        }
        return false;//任何一个其实点都没有找到一个路径，说明失败了
    }
    //这里是递归的进行上下左右的查找
    bool Search(string &src,int rows,int cols,int i,int j,int k,char * str,vector<char> & flags)
    {
        int index = i*cols+j;
        int len = strlen(str);
        //检查边界条件，因为下面由加减的操作，且是数组下标
        if(i >= rows || j >= cols|| k >= len || i < 0 || j < 0 || src[index] != str[k] || flags[index] ==1)
        {
            return false;
        }
        if(k == len-1)//判断是否遍历到所给字符串到末尾，因为是递归，所以必须判断。
        {
            return true;
        }
        flags[index] = 1;//当前节点遍历过。
        //进行下左右上下的查找
        if(Search(src,rows,cols,i+1,j,k+1,str,flags) || 
        Search(src,rows,cols,i-1,j,k+1,str,flags) ||
        Search(src,rows,cols,i,j-1,k+1,str,flags)||
        Search(src,rows,cols,i,j+1,k+1,str,flags))
        {
            return true;
        }
        //左右上下都没找到，这条路不通，将此节点置为未走过。回到上层
        flags[index] = 0;
        return false;
    }
};
