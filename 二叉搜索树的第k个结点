/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};

给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8）    中，按结点数值大小顺序第三小结点的值为4。
*/
//比较笨的方法是，前序遍历。
class Solution {
public:
    TreeNode* KthNode(TreeNode* pRoot, int k)
    {
        if(pRoot == nullptr || k <= 0)
        {
            return nullptr;
        }
        vector<TreeNode * > res;
        res.push_back(nullptr);
        Search(pRoot->left,res);
        res.push_back(pRoot);
        Search(pRoot->right,res);
        if (k >= res.size())
        {
            return nullptr;
        }
        return res[k];
    }
    void Search(TreeNode* pRoot,vector<TreeNode*> & res)
    {
        if(pRoot == nullptr)
        {
            return;
        }
        Search(pRoot->left,res);
        res.push_back(pRoot);
        Search(pRoot->right,res);
    }
};
