/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 二叉搜索树（BST）中的两个节点被错误地交换了，
请在不改变树的结构的情况下恢复这棵树。
备注；
用O(n)的空间解决这个问题的方法太暴力了，你能设计一个常数级空间复杂度的算法么？
 采用morris 算法进行中序遍历。
    1.左节点不空，找到当前节点的中序前驱（左节点的最右的孩子）
    2.如果前驱的右孩子指向当前的节点则断开
    3.如果前驱的右孩子指向空则指向当前节点。
    4.将有问题的两个节点找到， 最后进行值的交换
 */
class Solution {
public:
    void recoverTree(TreeNode *root) {
        auto cur = root;
        TreeNode * node1 = nullptr;
        TreeNode * node2 = nullptr;
        TreeNode * pre = nullptr;
        while(cur != nullptr){
            //找起始节点，寻找当前节点的中序的前驱
            if(cur->left != nullptr){
                TreeNode * right = cur->left;
                while(right->right != nullptr && right->right != cur){
                    right = right->right;
                }
                if(right->right == cur){
                    right->right = nullptr;
                }else{
                    right->right = cur;
                    cur = cur->left;//这里也是寻找起始节点的过程
                    continue;
                }
            }
            if(pre != nullptr && pre->val > cur->val){
               if(node1 == nullptr){
                   node1 = pre;
               }
                node2 = cur;//这里直接赋值，可以避免两个节点的情况发生
            }
            pre = cur;
            cur = cur->right;
        }
        if(node1 != nullptr && node2 != nullptr){
            int t = node1->val;
            node1->val = node2->val;
            node2->val = t;            
        }
    }
};
