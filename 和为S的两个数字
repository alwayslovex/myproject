//递增数组，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。

class Solution {
public:
    //第二种思想。
    vector<int> FindNumbersWithSum(vector<int> array,int sum) {
        int i =0,j=array.size()-1;
        vector<int> ret;
        while(i < j)
        {
            int t_sum = array[i] + array[j];
            if(t_sum == sum)
            {
                ret.push_back(array[i]);
                ret.push_back(array[j]);
                break;
            }
            if(t_sum < sum)
            {
                i++;
            }
            else{
                j--;
            }
        }
        return ret;
    }
};

//2 3 4 5 6 7
//两个指针。第二个指针是第一个的下一个。
//如果两个数的和小于S,那么第二个指针后移，第一个不动。如果相等，计算是否积最小。
//如果大于S，且不是相邻的两数，那么第一个指针后移，第二个指针置为第一个指针的下一个，重复上面的过程
//如果大于S，且是相邻的两数，那么停止查找。肯定没了。（未验证正确与否）

//其他的思想。
/*
乘积最小，就是两个数离的远。即一小一大。那么从左到右，和从右到左，开始
>S：右指针前移
<S:左指针前移
*/
