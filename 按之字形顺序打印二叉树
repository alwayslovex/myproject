/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
    
    一层一层打印一样。只是变顺序。需要将队列改成双端队列。每层元素保证左右的顺序
};
*/
class Solution {
public:
    vector<vector<int> > Print(TreeNode* pRoot) {
            deque<TreeNode*> que;
            vector<vector<int>> res;
            if(pRoot == nullptr)
            {
                return res;
            }
            que.push_front(pRoot);
            bool b = true;//t ->
            while(!que.empty())
            {
                int quesize = que.size();
                vector<int> r;
                for(int i = 0;i < quesize;++i)
                {
                    TreeNode * pt = b ? que.front():que.back();//左右顺序取值。从队头，否则取队尾
                    b ? que.pop_front() : que.pop_back();
                    r.push_back(pt->val);
                    if(b)//取队头，那么插入就要放到队尾
                    {
                        if(pt->left != nullptr)
                        {
                            que.push_back(pt->left);
                        }
                        if(pt->right != nullptr)
                        {
                            que.push_back(pt->right);
                        }
                    }
                    else{//取队尾，则插在队头。这里要保证队列中的顺序必须是左右。
                        if(pt->right != nullptr)
                        {
                            que.push_front(pt->right);
                        }
                    
                        if(pt->left != nullptr)
                        {
                            que.push_front(pt->left);
                        }
                    }
                }
                b = !b;
                res.push_back(r);
            }
            return res;
    }
    
};
