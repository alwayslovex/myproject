/*
题目描述：
如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。
如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，
使用GetMedian()方法获取当前读取数据的中位数。
*/

#include<queue>
//使用两个堆，一个大堆，一个小堆，小堆元素均大于大堆，这里用了stl库中的优先级队列模拟堆
//1.元素小于d小堆，大于大堆，入到少的那个堆
//2.元素小于小堆，小于等于大堆，入到大堆，然后调整。
//3.元素大于小堆，将元素插入到小堆，并将小堆堆顶元素出来入到大堆。
//如果对内存大小有要求，可以将两个堆元素保持一定的数量，溢出的直接丢掉就行了。这里假设内存够用
class Solution2 {
public:
    void Insert(int num)
    {
        if(min_heap.empty())
        {
            min_heap.push(num);
            return;
        }
        
        auto min_top=min_heap.top();
        if(max_heap.empty())
        {
            if(num > min_top)
            {
                max_heap.push(min_top);
                min_heap.pop();
                min_heap.push(num);
            }
            else{
                max_heap.push(num);
            }
            
            return;
        }
        if(num > min_top)
        {
            min_heap.push(num);
        }
        
        auto max_top = max_heap.top();
        if(num < min_top && num >max_top)
        {
            if(min_heap.size() < max_heap.size())
            {
                min_heap.push(num);
            }
            else{
                max_heap.push(num);
            }
        }
        else if(num < min_top && num <= max_top)
        {
            max_heap.push(num);
        }
        
        //开始调整
        if(max_heap.size() - 1 > min_heap.size())
        {
            min_heap.push(max_heap.top());
            max_heap.pop();
        }
        else if(min_heap.size() -1  > max_heap.size())
        {
            max_heap.push(min_heap.top());
            min_heap.pop();
        }
    }
    
    double GetMedian()
    {
        if(max_heap.empty() && min_heap.empty())
        {
            return 0.0;
        }
        if(max_heap.size() == min_heap.size())
        {
            return max_heap.top()/2.0 + min_heap.top()/2.0;
        }
        else{
            if(max_heap.size() > min_heap.size())
            {
                return max_heap.top()*1.0;
            }
            else{
                return min_heap.top()*1.0;
            }
        }
    }
    
    priority_queue<int,vector<int>,greater<int>> min_heap;
    priority_queue<int,vector<int>,less<int>> max_heap;
    
};
